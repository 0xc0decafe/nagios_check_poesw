#!/usr/bin/env python3

#       check_poesw
#       
#       Copyright 2025 Daniel Mende <mail@c0decafe.de>
#

#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the  nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import requests
from hashlib import md5
from lxml import html

parser = argparse.ArgumentParser(description="check_poesw v0.1 - Read PoE stats from noname china PoE switch")
parser.add_argument('-H', '--host', dest='host', required=True, help='IP of the management interface')
parser.add_argument('-u', '--user', dest='user', required=True, help='Username for authentication')
parser.add_argument('-p', '--password', dest='password', required=True, help='Password for authentication')

args = parser.parse_args()

pse_system_url = "http://%s/pse_system.cgi" % args.host
pse_port_url = "http://%s/pse_port.cgi" % args.host

try:
  header = {"Cookie": "admin=%s" % md5(("%s%s" % (args.user, args.password)).encode('ascii')).hexdigest()}
  data = requests.get(pse_system_url, headers=header)
  tree = html.fromstring(data.content)
  elem = tree.xpath('//input')[0]
  consumption = elem.value

  data = requests.get(pse_port_url, headers=header)
  tree = html.fromstring(data.content)
  table = tree.xpath('//table')[1]
  rows = iter(table)
  headers = [col.text for col in next(rows)]
  perfdata = "|"
  for row in rows:
    values = [col.text for col in row]
    perfdata += "%s=%s " % (values[0].replace(" ", ""), values[4].replace("-", "0"))
  print("POESW_PWR OK: Current consumption %sW %s" % (consumption, perfdata))
  exit(0)
except Exception as e:
  print("POESW_PWR CRITICAL: %s" % e)
  exit(2)
